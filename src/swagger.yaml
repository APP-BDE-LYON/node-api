openapi: 3.0.0
info:
  title: Selfbuy
  description: ""
  version: 1.0.1

produces:
  - application/json

host: https://self-buy-api.herokuapp.com/

paths:
  /auth:
    post:
      summary: User Authentication
      tags:
        - Security
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/UserAuth'
      responses:
        '200':
          description:
            $ref: '#/components/responses/200/description'
          content:
            application/json:
              schema:
                $ref: '#/components/responseSchemas/UserToken'
  /auth/refresh:
    post:
      summary: Refresh user token
      tags:
        - Security
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description:
            $ref: '#/components/responses/200/description'
          content:
            application/json:
              schema:
                $ref: '#/components/responseSchemas/UserToken'
  /me:
    get:
      summary: Get current user
      security:
        - bearerAuth: []
      tags:
        - User
      responses:
        200:
          description:
            $ref: '#/components/responses/200/description'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
  /users:
    get:
      summary: Get all users
      security:
        - bearerAuth: []
      tags:
        - User
      responses:
        200:
          description:
            $ref: '#/components/responses/200/description'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
    post:
      summary: Create user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/UserCreation'
      responses:
        200:
          description:
            $ref: '#/components/responses/200/description'
          content:
            application/json:
              schema:
                $ref: '#/components/responseSchemas/UserCreation'
        400:
          $ref: '#/components/responses/400'
  /users/{userId}:
    get:
      summary: Get user by id
      security:
        - bearerAuth: []
      tags:
        - User
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user
      responses:
        200:
          description:
            $ref: '#/components/responses/200/description'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
    delete:
      summary: Delete user by id
      tags:
        - User
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user
      security:
        - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        400:
          $ref: '#/components/responses/400'
    put:
      summary: Update user by id
      security:
        - bearerAuth: []
      tags:
        - User
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/UserUpdate'
      responses:
        200:
          $ref: '#/components/responses/200'
        201:
          description: Invalid password
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
  /products:
    get:
      summary: Get all products
      security:
        - bearerAuth: []
      tags:
        - Products



tags:
  - name: Security
    description: Authentication routes
  - name: User
    description: Manage users
  - name: Products
    description: Manage products



components:
  parameters:
  responses:
    200:
      description: Successful request
    400:
      description: Failed request
    401:
      description: Unauthorized error
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        mail:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        birthday:
          type: number
        registrationDate:
          type: number
        isAdmin:
          type: boolean
          description: Determine if the user can connect to the back office
        active:
          type: boolean
        activationKey:
          type: string
          description: Allows you to activate your account if it has not yet been done
    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        price:
          type: number
        images:
          type: array
          items:
            type: string
  responseSchemas:
    UserToken:
      type: object
      properties:
        token:
          type: string
          description: Token which should use for all request. Expire after 30 minutes
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtYWlsIjoibW90dGFyZC5tYXhlbmNlQGdtYWlsLmNvbSIsImlhdCI6MTU2OTE2Mjc0MCwiZXhwIjoxNTY5MTY0NTQwfQ.cZmtRrHTI8Jb49zESbK00qNYRQEqvL9TuVI8zh3wjp
        refreshToken:
          type: string
          description: Token that permit to refresh token. expire after 50 days
          example: dad36276c41a561a077a3f30d168383cc99affce65236657afe7bdbfc762d67c
    UserCreation:
      type: object
      properties:
        userExisted:
          type: boolean
          description: User already exist in database
        userWasActive:
          type: boolean
          description: User is active
        mailIsSent:
          type: boolean
          description: Mail is sent
  requestBodies:
    UserAuth:
      type: object
      properties:
        mail:
          $ref: '#/components/schemas/User/properties/mail'
        password:
          type: string
    UserUpdate:
      type: object
      properties:
        mail:
          $ref: '#/components/schemas/User/properties/mail'
        firstname:
          $ref: '#/components/schemas/User/properties/firstname'
        lastname:
          $ref: '#/components/schemas/User/properties/lastname'
        birthday:
          $ref: '#/components/schemas/User/properties/birthday'
        password:
          type: string
    UserCreation:
      type: object
      properties:
        mail:
          $ref: '#/components/schemas/User/properties/mail'
